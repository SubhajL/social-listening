{
  "developerProfile": {
    "proficiencies": [
      "expert full-stack developer",
      "TypeScript",
      "React",
      "Next.js",
      "modern UI/UX frameworks"
    ],
    "frameworks": [
      "Tailwind CSS",
      "Shadcn UI",
      "Radix UI"
    ],
    "objective": "produce the most optimized and maintainable Next.js code",
    "principles": [
      "best practices",
      "clean code",
      "robust architecture"
    ]
  },

  "projectType": {
    "language": "typescript",
    "runtime": "node.js",
    "framework": "next.js",
    "database": "firebase-firestore",
    "description": "A Next.js application that serves both front-end and back-end, integrating with Firebase Firestore as the primary NoSQL database. It uses TypeScript for static typing, Firebase Authentication for security, and a custom data access layer rather than a traditional ORM.",
    "features": [
      "Server-Side Rendering (SSR) and Static Site Generation (SSG)",
      "Seamless integration of front-end (UI) and back-end (API routes) in one codebase",
      "Firebase Firestore for data storage, real-time updates, and scalability",
      "TypeScript for better tooling, maintainability, and safety",
      "DTO-based request/response contracts for clarity and stability",
      "Custom data access layer with Firestore SDK (no traditional ORM)",
      "Use of functional and declarative programming patterns",
      "Next.js server actions for server execution",
      "Optimized images and responsive design",
      "Modern UI frameworks integration",
      "Modern state management solutions"
    ]
  },
  "projectStructure": {
    "description": "Defines the directories and their responsibilities within the Next.js project.",
    "directories": {
      "pages": {
        "description": "Contains Next.js pages and API routes. UI pages (.tsx) for front-end rendering and /api/ subdirectory for server-side routes acting as controllers.",
        "subdirectories": {
          "api": {
            "description": "Houses server-side API endpoints. These routes act like controllers, handling HTTP requests, validating input with DTOs, and calling services for data operations."
          }
        }
      },
      "components": {
        "description": "Reusable UI components implemented as React functional components. No business or database logic—just presentation and user interaction."
      },
      "models": {
        "description": "TypeScript interfaces/types representing domain entities. Closely reflect Firestore documents, but do not dictate request/response formats. Internal use in services."
      },
      "services": {
        "description": "Encapsulates business logic and data persistence. Each service focuses on a domain (e.g., userService.ts), interacts with Firestore via lib, and returns DTOs or model entities. No UI or HTTP logic here."
      },
      "dto": {
        "description": "Data Transfer Objects defining shapes of incoming requests and outgoing responses. Provide input validation, ensure strict contracts, and decouple internal models from external representations."
      },
      "lib": {
        "description": "Infrastructure code: Firebase/Firestore initialization and helper functions. For example, firebase.ts for app init, firestore.ts for Firestore instance and query helpers. No business logic."
      },
      "utils": {
        "description": "General-purpose helper functions, validators, formatters, and constants. Pure utility code with no side effects or business logic."
      },
      "public": {
        "description": "Static assets (images, icons, etc.) served directly."
      },
      "styles": {
        "description": "Global and component-level CSS or SCSS files for styling."
      }
    }
  },
  "architecture": {
    "description": "Layer-by-layer conventions and responsibilities.",
    "layers": {
      "apiRoutes": {
        "location": "pages/api/",
        "responsibilities": [
          "Process HTTP requests (GET, POST, PUT, DELETE)",
          "Validate request data using DTOs and utils",
          "Call services for business logic and data retrieval",
          "Return standardized JSON responses",
          "No direct Firestore queries—delegates to services"
        ]
      },
      "services": {
        "location": "services/",
        "responsibilities": [
          "Implement business logic",
          "Interact with Firestore via lib/firestore.ts",
          "Return entities (models) or DTOs",
          "No UI or HTTP-specific logic"
        ]
      },
      "models": {
        "location": "models/",
        "responsibilities": [
          "Define domain entities as TypeScript interfaces",
          "Reflect Firestore documents",
          "No methods, just properties",
          "Used internally in services"
        ]
      },
      "dto": {
        "location": "dto/",
        "responsibilities": [
          "Define request/response data structures",
          "Validate and ensure contract stability",
          "Contain only needed fields for external clients",
          "Enable consistent APIs between front-end and back-end"
        ]
      },
      "components": {
        "location": "components/",
        "responsibilities": [
          "UI composition and presentation",
          "Fetch data via API routes",
          "No direct database or service calls"
        ]
      },
      "lib": {
        "location": "lib/",
        "responsibilities": [
          "Firebase and Firestore initialization",
          "Low-level infrastructure and query helpers",
          "No business logic"
        ]
      },
      "utils": {
        "location": "utils/",
        "responsibilities": [
          "Pure utility functions",
          "Validation, formatting, constants",
          "No side effects or domain logic"
        ]
      }
    }
  },
  "codingStyle": {
    "description": "Coding standards, formatting rules, and naming conventions.",
    "rules": {
      "languageTooling": [
        "Use TypeScript for all .ts and .tsx files",
        "Enable 'strict' mode in tsconfig.json",
        "Use ESLint for linting and Prettier for formatting"
      ],
      "indentationWhitespace": [
        "2 spaces per indentation",
        "No trailing whitespace",
        "Single blank line separation, newline at EOF"
      ],
      "lineLength": "Max 100 characters per line",
      "namingConventions": {
        "filesDirectories": "kebab-case (e.g., user-service.ts, user-controller.ts)",
        "reactComponents": "PascalCase for component filenames (e.g., UserList.tsx)",
        "classesInterfaces": "PascalCase (e.g., User, UserDTO)",
        "variablesFunctions": "camelCase",
        "constants": "UPPER_CASE_SNAKE_CASE (e.g., MAX_PAGE_SIZE)"
      },
      "semicolonsQuotes": [
        "Use single quotes for strings",
        "End statements with semicolons"
      ],
      "importsExports": [
        "Use named imports/exports where possible",
        "Order imports: external -> internal -> relative",
        "Sort imports alphabetically within groups"
      ],
      "typescriptSpecifics": [
        "Prefer explicit types for parameters and return values",
        "Use interfaces for object shapes (DTOs, entities)",
        "Use readonly for immutable properties"
      ],
      "functionalProgramming": [
        "Use functional and declarative programming patterns; avoid classes",
        "Favor iteration and modularization over code duplication",
        "Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)"
      ],
      "fileStructure": [
        "Structure files with exported components, subcomponents, helpers, static content, and types",
        "Use lowercase with dashes for directory names (e.g., components/auth-wizard)"
      ],
      "codeOrganization": [
        "Write short functions following the single responsibility principle. Each function should do one thing and do it well",
        "Use Next.js server actions when possible to handle server execution on the server"
      ]
    }
  },
  "bestPractices": {
    "description": "Recommendations for writing high-quality, maintainable code.",
    "controller": [
      "Use unified response format ResponseEntity<ApiResult>",
      "Add appropriate OpenAPI documentation annotations",
      "Implement parameter validation",
      "Apply permission controls"
    ],
    "service": [
      "Encapsulate business logic",
      "Manage transactions",
      "Handle exceptions",
      "Log operations"
    ],
    "general": [
      "Use unified exception handling",
      "Follow Alibaba Java development standards",
      "Add appropriate comments and documentation"
    ],
    "optimization": {
      "description": "Optimization and best practices.",
      "rules": [
        "Minimize the use of 'use client', use React Server Components (RSC) and Next.js SSR features",
        "Implement dynamic imports for code splitting and optimization",
        "Use responsive design with a mobile-first approach",
        "Optimize images: use WebP format, include size data, implement lazy loading"
      ]
    }
  },
  "errorHandlingLoggingResponse": {
    "errorHandling": {
      "description": "How errors are handled and returned.",
      "rules": [
        "Catch errors at API route level",
        "Log the error, return a standardized JSON error response",
        "Use a consistent error response structure (error.code, error.message, error.details)",
        "Do not expose sensitive/internal details in error messages",
        "Handle known cases (e.g., not found, invalid input) with clear error codes",
        "Prioritize error handling and edge cases",
        "Use early returns for error conditions",
        "Implement guard clauses to handle preconditions and invalid states early",
        "Use custom error types for consistent error handling"
      ]
    },
    "logging": {
      "description": "Logging conventions.",
      "rules": [
        "Use a structured logging library (e.g., pino or winston)",
        "Log key events at INFO",
        "Log unexpected errors at ERROR with stack traces",
        "Include context (userId, requestId)",
        "Do not log sensitive data"
      ]
    },
    "responseFormat": {
      "description": "Structure of successful and error responses.",
      "successExample": {
        "data": {},
        "message": "Optional success message"
      },
      "errorExample": {
        "error": {
          "code": "ERROR_CODE",
          "message": "Description",
          "details": "Additional info if needed"
        }
      },
      "rules": [
        "Return 4xx/5xx for errors with standardized error JSON",
        "Include metadata for paginated/filter results",
        "Reflect authentication/authorization states in responses"
      ]
    }
  },
  "documentation": {
    "description": "Documentation and commenting standards.",
    "tsdoc": {
      "general": "Use TSDoc comments (/** ... */) for classes, functions, interfaces.",
      "controllers": "At top of API route files, explain purpose, endpoints, and logic.",
      "services": "Document what each service function does, its params, and returns.",
      "models": "Document entity fields and Firestore-related notes.",
      "dto": "Document property validation rules and purpose.",
      "libUtils": "Document what queries or validations each function performs."
    },
    "openAPI": {
      "description": "Use OpenAPI/Swagger if needed.",
      "rules": [
        "Maintain an OpenAPI spec file mapping API routes",
        "Document input/output DTOs, status codes, authentication requirements",
        "Keep OpenAPI spec in sync with code in CI/CD process"
      ]
    },
    "additionalDocs": {
      "description": "Extra documentation guidelines.",
      "rules": [
        "Maintain /docs for architecture overviews, ADRs, and FAQs",
        "Add README in key directories explaining their purpose",
        "Ensure consistent naming and comments for automated documentation tools"
      ]
    }
  },
  "securityValidation": {
    "description": "Security and validation rules.",
    "authorizationAuthentication": {
      "rules": [
        "Use Firebase Authentication for user identification",
        "Verify ID tokens server-side",
        "Protected endpoints require valid credentials, return 401 if not authorized",
        "Implement role/claims-based checks as needed",
        "Minimal user info in Firestore, rely on Firebase rules and token verification"
      ]
    },
    "inputValidation": {
      "rules": [
        "Validate incoming request data against DTO schemas (using zod/yup)",
        "Return 400 Bad Request with descriptive message if validation fails",
        "No null/undefined where not expected",
        "Sanitize user input to prevent injection attacks"
      ]
    },
    "dataIntegritySecurity": {
      "rules": [
        "Enforce Firestore Security Rules for client access",
        "Apply server-side checks for userId ownership",
        "Encrypt sensitive data at rest if needed",
        "Never log sensitive user details"
      ]
    }
  },
  "stateManagementDataFetching": {
    "description": "State management and data fetching strategies.",
    "rules": [
      "Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching",
      "Implement validation using Zod for schema validation"
    ]
  },
  "uiStyling": {
    "description": "UI and styling conventions.",
    "rules": [
      "Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling",
      "Implement consistent design and responsive patterns across platforms"
    ]
  },
  "securityPerformance": {
    "description": "Security and performance optimization.",
    "rules": [
      "Implement proper error handling, user input validation, and secure coding practices",
      "Follow performance optimization techniques, such as reducing load times and improving rendering efficiency"
    ]
  },
  "usageExamples": {
    "description": "Examples illustrating typical data flow.",
    "dataFlowExample": [
      "Client sends POST /api/users with JSON payload",
      "API route validates input via CreateUserDTO, calls userService.createUser()",
      "userService.createUser() uses lib/firestore.ts to insert new user doc, returns UserDTO",
      "API route returns JSON with UserDTO",
      "Front-end components fetch this endpoint and render the created user"
    ]
  },
  "enforcement": {
    "description": "Ensuring rules are followed.",
    "tools": [
      "ESLint and Prettier for code style checks",
      "Husky and lint-staged for pre-commit validations",
      "Continuous Integration checks to ensure OpenAPI spec and docs are up-to-date"
    ]
  },
  "methodology": {
    "description": "Approach to problem-solving and development processes.",
    "principles": {
      "system2Thinking": {
      "description": "Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation."
    },
      "treeOfThoughts": {
    "description": "Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one."
    },
    "iterativeRefinement": {
      "description": "Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust."
    },
    "codePreservation": {
    "description": "Do Not, Repeat Do Not delete any chunks of code, more than 10 lines. If you think it is necessary to do so, explain clearly your reasonings and provide detailed analysis of context.md file for history of changes to make sure that you do not delete previously developed and tested functionalities."
    }
    },
    "process": {
    "description": "Step-by-step approach to developing and refining the code.",
    "steps": {
    "deepDiveAnalysis": {
    "description": "Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints."
    },
    "planning": {
    "description": "Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary."
    },
    "implementation": {
    "description": "Implement the solution step-by-step, ensuring that each part adheres to the specified best practices."
    },
    "reviewAndOptimize": {
    "description": "Perform a review of the code, looking for areas of potential optimization and improvement."
    },
    "finalization": {
    "description": "Finalize the code by ensuring it meets all requirements, is secure, and is performant."
    }
    }
    }
  },
  "contextReview": {
    "description": "Process for reviewing and updating context.md",
    "steps": [
      {
        "step": 1,
        "action": "Review context.md",
        "details": "Review for relevant history or decisions related to current feature/change"
      },
      {
        "step": 2,
        "action": "Plan implementation",
        "considerations": [
          "Previous architectural decisions",
          "Existing patterns and conventions",
          "Potential impacts on other features"
        ]
      },
      {
        "step": 3,
        "action": "Document plan",
        "template": {
          "date": "YYYY-MM-DD",
          "type": "PLANNING",
          "description": {
            "type": "string",
            "description": "Brief description of planned implementation/change"
          },
          "technicalDetails": {
            "implementationPlan": {
              "type": "array",
              "description": "Numbered steps of implementation"
            },
            "affectedFiles": {
              "type": "array",
              "description": "List of files to be modified"
            }
          },
          "considerations": {
            "previousChanges": {
              "type": "array",
              "description": "References to previous relevant entries"
            },
            "potentialImpacts": {
              "type": "array",
              "description": "List of potential impacts"
            },
            "alternatives": {
              "type": "array",
              "description": "Alternative approaches considered"
            }
          },
          "relatedIssues": {
            "type": "array",
            "description": "Links to related issues/PRs"
          }
        }
      },
      {
        "step": 4,
        "action": "Update after implementation",
        "details": "Document actual changes and deviations from plan"
      }
    ],
    "contextFormat": {
      "sections": {
        "purpose": {
          "type": "list",
          "items": [
            "Major architectural decisions",
            "Important code changes",
            "Feature implementations",
            "Breaking changes",
            "Refactoring decisions",
            "Security considerations"
          ]
        },
        "entryTypes": [
          "FEATURE",
          "CHANGE",
          "REFACTOR",
          "SECURITY",
          "BREAKING",
          "PLANNING"
        ],
        "entryStructure": {
          "date": {
            "format": "YYYY-MM-DD",
            "description": "Current date in YYYY-MM-DD format",
            "example": "2024-12-19"
          },
          "type": "string (one of entryTypes)",
          "description": "string",
          "technicalDetails": {
            "implementation": "string or array",
            "affectedFiles": "array",
            "dependencies": "array"
          },
          "considerations": {
            "previousChanges": "array",
            "tradeoffs": "array",
            "alternatives": "array",
            "impacts": "array",
            "futureImplications": "array"
          },
          "relatedIssues": "array"
        }
      }
    }
  }
}
